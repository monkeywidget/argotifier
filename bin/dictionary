#!/usr/bin/ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility

$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../app/models')
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/lib')
# require 'rubygems'
require 'usage'
require 'database_connection'

def stats
  puts "TODO: unimplemented"
end

def save_dictionary_to_file( filename )
  require "translated_word"
  require "word"

  file = File.open(filename, "w")

  translations = TranslatedWord.all

  if translations.nil?
    abort("no translations found")
  end

  translations.each do |translation|
    file.puts "#{translation.word.text},#{translation.translation}"
  end

  file.close

  puts "dictionary written to file \"#{filename}\""
end


def load_dictionary_from_file( filename )
  require "translated_word"
  require "word"

  file = File.open(filename, "r")


  file.each_line do |line|
    line.gsub!(/\r\n?/, "\n")
    word_text, translation_text = line.chop.split ","

    if word_text.nil? or word_text.eql? "" or
        translation_text.nil? or translation_text.eql? ""
      abort("Bad line in file \"#{filename}\": line is \"#{line.chop}\"")
    end

    word = Word.find_or_create_by_text(word_text)

    translated_word = TranslatedWord.find_by_word_id( word )

    if translated_word.nil?
      translated_word = TranslatedWord.create!( :word => word,
                                                :translation => translation_text)
    end

    translated_word.translation = translation_text
    translated_word.save

  end

  file.close

  puts "dictionary loaded from file \"#{filename}\""
end


if ARGV[0].nil? or ARGV.length > 1
  abort("USAGE: #{usage_dictionary}")
else
  command = ARGV[0]
end

connect_to_db

if command.eql? "load"
  abort "USAGE: #{usage_dictionary}" if ARGV[1].nil?
  filename = ARGV[1]
  load_dictionary_from_file(filename)
elsif command.eql? "save"
  abort "USAGE: #{usage_dictionary}" if ARGV[1].nil?
  filename = ARGV[1]
  save_dictionary_to_file (filename)
elsif command.eql? "stats"
  print_stats
else
  abort "USAGE: #{usage_dictionary}"
end
