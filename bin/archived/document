#!/usr/bin/ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility

$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../app/models')
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/lib')
# require 'rubygems'
require 'usage'
require 'database_connection'


def load_document_from_file(title, filename)
  require 'document'
  # these requires are entirely for add_new_paragraph
  require 'paragraph'
  require 'sentence'
  require 'word'
  require 'sentenceword'

  document = Document.find_or_create_by_title(:title => title)
  document.save    # will only do something if we did a "create" vs "find"

  puts "The document title is \"#{document.title}\"\n\n"

  # open the file named by the arg
  file = File.open(filename).read
  file.gsub!(/\r\n?/, "\n")

  # buffer for the Paragraph we're building
  paragraph_text = ""

  file.each_line do |line|
    # for every line

    line = line.chop.strip

    # if entirely empty
    if line.nil? or line.length == 0

      # if the buffer is not empty, write as a new Paragraph
      if paragraph_text.length > 0

        document.add_new_paragraph(paragraph_text)
        print "."

        paragraph_text = ""  # reset buffer
      end

      next  # skip the empty line
    end

    # append the non-empty line to the buffer
    paragraph_text << line + " "

  end # end of file
  # we're at EOF:

  # if the buffer is not empty, write as a new Paragraph
  if paragraph_text.length > 0

    document.add_new_paragraph(paragraph_text)
    print "."

  end

  puts "\nsuccess!\n\n"

  # close the file
  # file.close

end

# TODO: save_document_to_file (title, filename)

if ARGV[0].nil? or ARGV[1].nil? or ARGV[2].nil? or ARGV.length > 3
  abort("USAGE: #{usage_document}")
else
  command = ARGV[0]
  title = ARGV[1]
  filename = ARGV[2]
end

connect_to_db

if command.eql? "load"
  load_document_from_file(title, filename)
elsif command.eql? "save"
  # save_document_to_file (title, filename)
else
  abort "USAGE: #{usage_document}"
end
